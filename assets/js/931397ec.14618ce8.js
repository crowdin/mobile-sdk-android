"use strict";(self.webpackChunk_crowdin_mobile_sdk_android_website=self.webpackChunk_crowdin_mobile_sdk_android_website||[]).push([[839],{9365:(e,t,n)=>{n.d(t,{A:()=>i});var a=n(6540),r=n(53);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>C});var a=n(8168),r=n(6540),o=n(53),i=n(3104),l=n(6347),s=n(7485),u=n(1682),d=n(9466);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=m({queryString:n,groupId:a}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),y=(()=>{const e=s??c;return g({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var y=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),a=u[n].value;a!==l&&(c(t),s(a))},g=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:g,onClick:p},i,{className:(0,o.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=h(e);return r.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},r.createElement(f,(0,a.A)({},e,t)),r.createElement(w,(0,a.A)({},e,t)))}function C(e){const t=(0,y.A)();return r.createElement(v,(0,a.A)({key:String(t)},e))}},2921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>b,default:()=>A,frontMatter:()=>y,metadata:()=>f,toc:()=>v});var a=n(8168),r=(n(6540),n(5680)),o=n(1470),i=n(9365),l=n(2355);const s="override fun onCreate() {\n    super.onCreate()\n\n    Crowdin.init(applicationContext,\n        CrowdinConfig.Builder()\n            .withDistributionHash(your_distribution_hash)\n            .withScreenshotEnabled()\n            .withSourceLanguage(source_language)\n            .withAuthConfig(AuthConfig(\n                client_id,\n                client_secret,\n                request_auth_dialog\n            ))\n            .withOrganizationName(organization_name)   // required for Crowdin Enterprise\n            .withNetworkType(network_type)             // optional\n            .withUpdateInterval(interval_in_seconds)   // optional\n            .build())\n}\n\n// Using system buttons to take screenshots and automatically upload them to Crowdin.\nCrowdin.registerScreenShotContentObserver(this)",u="@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Crowdin.init(this,\n        new CrowdinConfig.Builder()\n            .withDistributionHash(your_distribution_hash)\n            .withScreenshotEnabled()\n            .withSourceLanguage(source_language)\n            .withAuthConfig(new AuthConfig(\n                client_id,\n                client_secret,\n                request_auth_dialog\n            ))\n            .withOrganizationName(organization_name)   // required for Crowdin Enterprise\n            .withNetworkType(network_type)             // optional\n            .withUpdateInterval(interval_in_seconds)   // optional\n            .build());\n}\n\n// Using system buttons to take screenshots and automatically upload them to Crowdin.\nCrowdin.registerScreenShotContentObserver(this);\n";var d=n(9555),c=n(8898);const p='.withApiAuthConfig(\n    ApiAuthConfig(\n        apiToken = "your_crowdin_api_token",\n    )\n)',g='.withApiAuthConfig(\n    new ApiAuthConfig(\n        "your_crowdin_api_token"\n    )\n)',m='Crowdin.sendScreenshot(activity!!, screenshotName, object : ScreenshotCallback {\n    override fun onSuccess() {\n        Log.d(TAG, "Screenshot uploaded")\n    }\n\n    override fun onFailure(throwable: Throwable) {\n        Log.d(TAG, throwable.localizedMessage)\n    }\n})',h='View.OnClickListener oclBtnOk = new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Crowdin.sendScreenshot(YourActivity.this, screenshotName, new ScreenshotCallback() {\n            @Override\n            public void onSuccess() {\n                Log.d("", "Screenshot uploaded");\n            }\n\n            @Override\n            public void onFailure(Throwable throwable) {\n                Log.d("", String.valueOf(throwable));\n            }\n      });\n  }\n};',y={},b="Screenshots",f={unversionedId:"advanced-features/screenshots",id:"advanced-features/screenshots",title:"Screenshots",description:"The Screenshots feature enhances the localization workflow by automatically capturing and uploading tagged screenshots from your application to your Crowdin project. This provides translators with valuable visual context, ensuring more accurate and contextually appropriate translations.",source:"@site/docs/advanced-features/screenshots.mdx",sourceDirName:"advanced-features",slug:"/advanced-features/screenshots",permalink:"/mobile-sdk-android/advanced-features/screenshots",draft:!1,editUrl:"https://github.com/crowdin/mobile-sdk-android/tree/master/website/docs/advanced-features/screenshots.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Real-Time Preview",permalink:"/mobile-sdk-android/advanced-features/real-time-preview"},next:{title:"SDK Controls",permalink:"/mobile-sdk-android/advanced-features/sdk-controls"}},w={},v=[{value:"Overview",id:"overview",level:2},{value:"Setup",id:"setup",level:2},{value:"Authorization",id:"authorization",level:2},{value:"OAuth-based Authorization",id:"oauth-based-authorization",level:3},{value:"API Token Authorization",id:"api-token-authorization",level:3},{value:"Custom Screenshot Handler",id:"custom-screenshot-handler",level:2},{value:"Config Options",id:"config-options",level:2}],C={toc:v},N="wrapper";function A(e){let{components:t,...n}=e;return(0,r.yg)(N,(0,a.A)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"screenshots"},"Screenshots"),(0,r.yg)("p",null,"The Screenshots feature enhances the localization workflow by automatically capturing and uploading tagged screenshots from your application to your Crowdin project. This provides translators with valuable visual context, ensuring more accurate and contextually appropriate translations."),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"You can capture and upload tagged screenshots to Crowdin in three ways:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"System Screenshot Buttons"),": Utilize the default system buttons/gestures for taking screenshots"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Custom Handler"),": Implement your own screenshot trigger (e.g., an in-app button or gesture, or an automated workflow)"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"SDK Controls Widget"),": Use the built-in ",(0,r.yg)("a",{parentName:"li",href:"/advanced-features/sdk-controls"},"SDK Controls")," UI widget for easy management")),(0,r.yg)("h2",{id:"setup"},"Setup"),(0,r.yg)("p",null,"To enable the Screenshots feature in your application, add the following configuration to your ",(0,r.yg)("inlineCode",{parentName:"p"},"Application")," class:"),(0,r.yg)(o.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"kotlin",mdxType:"CodeBlock"},s)),(0,r.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"java",mdxType:"CodeBlock"},u))),(0,r.yg)("h2",{id:"authorization"},"Authorization"),(0,r.yg)("p",null,"The Screenshots feature requires authorization to transmit screenshots to your Crowdin project. Choose from two authorization methods based on your needs:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"OAuth-based Authorization"),": Uses ",(0,r.yg)("inlineCode",{parentName:"li"},"client_id")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"client_secret")," for web-based authorization. This method implements a secure OAuth flow that opens a dialog for users to authorize the application. Best suited for development environments and when user interaction is acceptable."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"API Token Authorization"),": Uses the ",(0,r.yg)("inlineCode",{parentName:"li"},"ApiAuthConfig")," to pass the ",(0,r.yg)("inlineCode",{parentName:"li"},"apiToken")," directly. This streamlined method is ideal for automated workflows, CI/CD pipelines, or scenarios where user interaction is not desired.")),(0,r.yg)("h3",{id:"oauth-based-authorization"},"OAuth-based Authorization"),(0,r.yg)("p",null,"Implements a secure web-based authorization flow using ",(0,r.yg)("inlineCode",{parentName:"p"},"client_id")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"client_secret"),". This method:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Opens a dialog for user authorization"),(0,r.yg)("li",{parentName:"ul"},"Provides a secure authentication process"),(0,r.yg)("li",{parentName:"ul"},"Is ideal for development and testing environments")),(0,r.yg)(o.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"kotlin",mdxType:"CodeBlock"},d.A)),(0,r.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"java",mdxType:"CodeBlock"},c.A))),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"When using OAuth, verify that your OAuth App redirect URL matches your ",(0,r.yg)("strong",{parentName:"li"},"App scheme"),". For example, if your scheme is ",(0,r.yg)("inlineCode",{parentName:"li"},'<data android:scheme="crowdintest" />'),", the redirect URL in Crowdin should be ",(0,r.yg)("inlineCode",{parentName:"li"},"crowdintest://"),"."),(0,r.yg)("li",{parentName:"ul"},"To easily control the Screenshots feature you could also use the ",(0,r.yg)("a",{parentName:"li",href:"/advanced-features/sdk-controls"},"SDK Controls")," UI widget."))),(0,r.yg)("h3",{id:"api-token-authorization"},"API Token Authorization"),(0,r.yg)("p",null,"A streamlined approach using the ",(0,r.yg)("inlineCode",{parentName:"p"},"ApiAuthConfig")," class that bypasses OAuth authentication. This method:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Allows direct API token integration"),(0,r.yg)("li",{parentName:"ul"},"Requires no user interaction"),(0,r.yg)("li",{parentName:"ul"},"Is perfect for CI/CD pipelines and automated workflows")),(0,r.yg)(o.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"kotlin",mdxType:"CodeBlock"},p)),(0,r.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"java",mdxType:"CodeBlock"},g))),(0,r.yg)("h2",{id:"custom-screenshot-handler"},"Custom Screenshot Handler"),(0,r.yg)("p",null,"Implement your own screenshot capture logic by setting up a custom handler. This provides complete control over the screenshot capture process and allows integration with your application's specific requirements."),(0,r.yg)(o.A,{groupId:"language",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"kotlin",mdxType:"CodeBlock"},m)),(0,r.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.yg)(l.A,{language:"java",mdxType:"CodeBlock"},h))),(0,r.yg)("h2",{id:"config-options"},"Config Options"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config option"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Example"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withDistributionHash")),(0,r.yg)("td",{parentName:"tr",align:null},"Distribution Hash"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},'withDistributionHash("7a0c1...7uo3b")'))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withScreenshotEnabled")),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Screenshots feature"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withScreenshotEnabled()"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withSourceLanguage")),(0,r.yg)("td",{parentName:"tr",align:null},"Source language code in your Crowdin project"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},'withSourceLanguage("en")'))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withAuthConfig")),(0,r.yg)("td",{parentName:"tr",align:null},"Crowdin authorization config"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withAuthConfig(AuthConfig(client_id, client_secret, request_auth_dialog))"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"client_id"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"client_secret")),(0,r.yg)("td",{parentName:"tr",align:null},"Crowdin OAuth Client ID and Client Secret"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},'"gpY2yC...cx3TYB"'),", ",(0,r.yg)("inlineCode",{parentName:"td"},'"Xz95tfedd0A...TabEDx9T"'))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"request_auth_dialog")),(0,r.yg)("td",{parentName:"tr",align:null},"Request authorization dialog"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"true")," (default) or ",(0,r.yg)("inlineCode",{parentName:"td"},"false"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withApiAuthConfig")),(0,r.yg)("td",{parentName:"tr",align:null},"Crowdin authorization API config"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withApiAuthConfig(ApiAuthConfig(api_token))"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"api_token")),(0,r.yg)("td",{parentName:"tr",align:null},"Crowdin authorization token"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},'"gpY2yC...cx3TYB"'))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"withOrganizationName")),(0,r.yg)("td",{parentName:"tr",align:null},"An Organization domain name",(0,r.yg)("br",null),"(for ",(0,r.yg)("strong",{parentName:"td"},"Crowdin Enterprise users only"),")"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},'"mycompany"')," for Crowdin Enterprise or ",(0,r.yg)("inlineCode",{parentName:"td"},"null")," for crowdin.com")))),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"See the ",(0,r.yg)("a",{parentName:"p",href:"https://support.crowdin.com/account-settings/#oauth"},"OAuth")," and ",(0,r.yg)("a",{parentName:"p",href:"https://support.crowdin.com/account-settings/#api"},"API")," sections in your Crowdin account settings to obtain the necessary credentials.")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"Ensure you've properly ",(0,r.yg)("a",{parentName:"li",href:"/setup#context-wrapping"},"wrapped context")," for all activities where screenshots will be captured."),(0,r.yg)("li",{parentName:"ul"},"Using the ",(0,r.yg)("inlineCode",{parentName:"li"},"Crowdin.registerScreenShotContentObserver(this)")," (system button handler) to send screenshots to Crowdin requires storage permission for your application."))))}A.isMDXComponent=!0},8898:(e,t,n)=>{n.d(t,{A:()=>a});const a="@Override\npublic void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {\n    super.onCreate(savedInstanceState, persistentState);\n    Crowdin.authorize(this);\n}"},9555:(e,t,n)=>{n.d(t,{A:()=>a});const a="override fun onCreate(savedInstanceState: Bundle?) {\n    Crowdin.authorize(this)\n}"}}]);