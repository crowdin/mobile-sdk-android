"use strict";(self.webpackChunk_crowdin_mobile_sdk_android_website=self.webpackChunk_crowdin_mobile_sdk_android_website||[]).push([[887],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),l=n(6550),s=n(1980),u=n(7392),d=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:n,groupId:a}),[c,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),k(e)}),[u,k,o]),tabValues:o}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),a=u[n].value;a!==l&&(c(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},i,{className:(0,o.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},r.createElement(f,(0,a.Z)({},e,t)),r.createElement(w,(0,a.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},5655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>k,default:()=>N,frontMatter:()=>h,metadata:()=>g,toc:()=>f});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162),l=n(614);const s="override fun onCreate() {\n    super.onCreate()\n\n    Crowdin.init(applicationContext,\n        CrowdinConfig.Builder()\n            .withDistributionHash(your_distribution_hash)\n            .withScreenshotEnabled()\n            .withSourceLanguage(source_language)\n            .withAuthConfig(AuthConfig(\n                client_id,\n                client_secret,\n                organization_name,\n                request_auth_dialog\n            ))\n            .withNetworkType(network_type)             // optional\n            .withUpdateInterval(interval_in_seconds)   // optional\n            .build())\n}\n\n// Using system buttons to take screenshots and automatically upload them to Crowdin.\nCrowdin.registerScreenShotContentObserver(this)",u="@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Crowdin.init(this,\n        new CrowdinConfig.Builder()\n            .withDistributionHash(your_distribution_hash)\n            .withScreenshotEnabled()\n            .withSourceLanguage(source_language)\n            .withAuthConfig(new AuthConfig(\n                client_id,\n                client_secret,\n                organization_name,\n                request_auth_dialog\n            ))\n            .withNetworkType(network_type)             // optional\n            .withUpdateInterval(interval_in_seconds)   // optional\n            .build());\n}\n\n// Using system buttons to take screenshots and automatically upload them to Crowdin.\nCrowdin.registerScreenShotContentObserver(this);\n";var d=n(3087),c=n(3232);const p='Crowdin.sendScreenshot(activity!!, object : ScreenshotCallback {\n    override fun onSuccess() {\n        Log.d(TAG, "Screenshot uploaded")\n    }\n\n    override fun onFailure(throwable: Throwable) {\n        Log.d(TAG, throwable.localizedMessage)\n    }\n})',m='View.OnClickListener oclBtnOk = new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Crowdin.sendScreenshot(YourActivity.this, new ScreenshotCallback() {\n            @Override\n            public void onSuccess() {\n                Log.d("", "Screenshot uploaded");\n            }\n\n            @Override\n            public void onFailure(Throwable throwable) {\n                Log.d("", String.valueOf(throwable));\n            }\n      });\n  }\n};',h={},k="Screenshots",g={unversionedId:"advanced-features/screenshots",id:"advanced-features/screenshots",title:"Screenshots",description:"Enable this option if you want all screenshots taken in the application to be automatically sent to your Crowdin project with tagged strings. This provides additional context for translators.",source:"@site/docs/advanced-features/screenshots.mdx",sourceDirName:"advanced-features",slug:"/advanced-features/screenshots",permalink:"/mobile-sdk-android/advanced-features/screenshots",draft:!1,editUrl:"https://github.com/crowdin/mobile-sdk-android/tree/master/website/docs/advanced-features/screenshots.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Real-Time Preview",permalink:"/mobile-sdk-android/advanced-features/real-time-preview"},next:{title:"SDK Controls",permalink:"/mobile-sdk-android/advanced-features/sdk-controls"}},b={},f=[{value:"Setup",id:"setup",level:3},{value:"Authorization",id:"authorization",level:3},{value:"Setting up own handler",id:"setting-up-own-handler",level:3},{value:"Config options",id:"config-options",level:3}],w={toc:f},v="wrapper";function N(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,a.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"screenshots"},"Screenshots"),(0,r.kt)("p",null,"Enable this option if you want all screenshots taken in the application to be automatically sent to your Crowdin project with tagged strings. This provides additional context for translators."),(0,r.kt)("p",null,"You can take screenshots and automatically upload them tagged to Crowdin in the following ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using the ",(0,r.kt)("strong",{parentName:"li"},"system buttons")," for taking a screenshot."),(0,r.kt)("li",{parentName:"ul"},"create your ",(0,r.kt)("strong",{parentName:"li"},"own handler")," (for example, clicking on some button in your application)."),(0,r.kt)("li",{parentName:"ul"},"using the ",(0,r.kt)("a",{parentName:"li",href:"/advanced-features/sdk-controls"},"SDK Controls")," UI widget.")),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To enable the Screenshots feature, add the following code to the ",(0,r.kt)("em",{parentName:"p"},"Application")," class:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"kotlin",mdxType:"CodeBlock"},s)),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"java",mdxType:"CodeBlock"},u))),(0,r.kt)("h3",{id:"authorization"},"Authorization"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"kotlin",mdxType:"CodeBlock"},d.Z)),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"java",mdxType:"CodeBlock"},c.Z))),(0,r.kt)("h3",{id:"setting-up-own-handler"},"Setting up own handler"),(0,r.kt)("p",null,"If you want to set up your own handler for capturing screenshots, you can do it programmatically with a callback:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"kotlin",mdxType:"CodeBlock"},p)),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"java",mdxType:"CodeBlock"},m))),(0,r.kt)("admonition",{title:"Tips",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"To use the Screenshots feature you still need to ",(0,r.kt)("a",{parentName:"li",href:"/setup#context-wrapping"},"wrap context")," for your activities."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://support.crowdin.com/creating-oauth-app/"},"OAuth App")," redirect URL should match your ",(0,r.kt)("strong",{parentName:"li"},"App scheme"),". ",(0,r.kt)("br",null),"E.g., for scheme ",(0,r.kt)("inlineCode",{parentName:"li"},'<data android:scheme="crowdintest" />')," redirect URL in Crowdin should be ",(0,r.kt)("inlineCode",{parentName:"li"},"crowdintest://"),"."),(0,r.kt)("li",{parentName:"ul"},"To easily control the Screenshots feature you could also use the ",(0,r.kt)("a",{parentName:"li",href:"/advanced-features/sdk-controls"},"SDK Controls")," UI widget."))),(0,r.kt)("h3",{id:"config-options"},"Config options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Config option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withDistributionHash")),(0,r.kt)("td",{parentName:"tr",align:null},"Distribution Hash"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'withDistributionHash("7a0c1...7uo3b")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withScreenshotEnabled")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable Screenshots feature"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withScreenshotEnabled()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withSourceLanguage")),(0,r.kt)("td",{parentName:"tr",align:null},"Source language code in your Crowdin project"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'withSourceLanguage("en")'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withAuthConfig")),(0,r.kt)("td",{parentName:"tr",align:null},"Crowdin authorization config"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'withAuthConfig(AuthConfig("client_id", "client_secret", "organization_name"))'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"client_id"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"client_secret")),(0,r.kt)("td",{parentName:"tr",align:null},"Crowdin OAuth Client ID and Client Secret"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"gpY2yC...cx3TYB"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"Xz95tfedd0A...TabEDx9T"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"organization_name")),(0,r.kt)("td",{parentName:"tr",align:null},"An Organization domain name",(0,r.kt)("br",null),"(for ",(0,r.kt)("strong",{parentName:"td"},"Crowdin Enterprise users only"),")"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"mycompany"')," for Crowdin Enterprise or ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," for crowdin.com")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"request_auth_dialog")),(0,r.kt)("td",{parentName:"tr",align:null},"Request authorization dialog"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")," by default or ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withNetworkType")),(0,r.kt)("td",{parentName:"tr",align:null},"Network type to be used for translations download"),(0,r.kt)("td",{parentName:"tr",align:null},"Acceptable values are:",(0,r.kt)("br",null),"- ",(0,r.kt)("inlineCode",{parentName:"td"},"NetworkType.ALL")," (default)",(0,r.kt)("br",null)," - ",(0,r.kt)("inlineCode",{parentName:"td"},"NetworkType.CELLULAR"),(0,r.kt)("br",null),"- ",(0,r.kt)("inlineCode",{parentName:"td"},"NetworkType.WIFI"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withUpdateInterval")),(0,r.kt)("td",{parentName:"tr",align:null},"Translations update interval in seconds. The minimum and the default value is 15 minutes. Translations will be updated every defined time interval once per application load"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withUpdateInterval(900)"))))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Crowdin.registerScreenShotContentObserver(this)")," (system button handler) to send screenshots to Crowdin requires storage permission for your application.")))}N.isMDXComponent=!0},3232:(e,t,n)=>{n.d(t,{Z:()=>a});const a="@Override\npublic void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {\n    super.onCreate(savedInstanceState, persistentState);\n    Crowdin.authorize(this);\n}"},3087:(e,t,n)=>{n.d(t,{Z:()=>a});const a="override fun onCreate(savedInstanceState: Bundle?) {\n    Crowdin.authorize(this)\n}"}}]);