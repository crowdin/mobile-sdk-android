"use strict";(self.webpackChunk_crowdin_mobile_sdk_android_website=self.webpackChunk_crowdin_mobile_sdk_android_website||[]).push([[199],{2912:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>w,default:()=>A,frontMatter:()=>f,metadata:()=>a,toc:()=>y});const a=JSON.parse('{"id":"setup","title":"Setup","description":"To configure Android SDK integration you need to:","source":"@site/docs/setup.mdx","sourceDirName":".","slug":"/setup","permalink":"/mobile-sdk-android/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/crowdin/mobile-sdk-android/tree/master/website/docs/setup.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/mobile-sdk-android/installation"},"next":{"title":"Real-Time Preview","permalink":"/mobile-sdk-android/advanced-features/real-time-preview"}}');var r=t(4848),i=t(8453),o=t(5537),s=t(9329),l=t(8069);const d="override fun getDelegate() = BaseContextWrappingDelegate(super.getDelegate())",c="@NonNull\n@Override\npublic AppCompatDelegate getDelegate() {\n    return new BaseContextWrappingDelegate(super.getDelegate());\n}",u="override fun attachBaseContext(newBase: Context) {\n    super.attachBaseContext(Crowdin.wrapContext(newBase))\n}",h="@Override\nprotected void attachBaseContext(Context newBase) {\n    super.attachBaseContext(Crowdin.wrapContext(newBase));\n}",p="override fun onCreate() {\n    super.onCreate()\n        Crowdin.init(applicationContext,\n            CrowdinConfig.Builder()\n                .withDistributionHash(your_distribution_hash)\n                .withOrganizationName(organization_name)      // required for Crowdin Enterprise\n                .withNetworkType(network_type)                // optional\n                .withUpdateInterval(interval_in_seconds)      // optional\n                .build())\n}",g="@Override\nprotected void onCreate() {\n    super.onCreate();\n\n    Crowdin.init(this,\n        new CrowdinConfig.Builder()\n            .withDistributionHash(your_distribution_hash)\n            .withOrganizationName(organization_name)      // required for Crowdin Enterprise\n            .withNetworkType(network_type)                // optional\n            .withUpdateInterval(interval_in_seconds)      // optional\n            .build());\n}",x='/**\n * Should be overridden in case you want to change locale programmatically.\n * For a custom language, set your application locale with language and country/region constraints.\n * This should match with `Locale code:` for your custom language in Crowdin.\n *\n * language - [a-zA-Z]{2,8}\n * country/region - [a-zA-Z]{2} | [0-9]{3}\n *\n * Example: "aa-BB"\n */\noverride fun attachBaseContext(newBase: Context) {\n    languagePreferences = LanguagePreferences(newBase)\n    super.attachBaseContext(\n        ContextWrapper(newBase.updateLocale(languagePreferences.getLanguageCode()))\n    )\n}',j='/**\n * Should be overridden in case you want to change locale programmatically.\n * For a custom language, set your application locale with language and country/region constraints.\n * This should match with `Locale code:` for your custom language in Crowdin.\n *\n * language - [a-zA-Z]{2,8}\n * country/region - [a-zA-Z]{2} | [0-9]{3}\n *\n * Example: "aa-BB"\n */\n@Override\nprotected void attachBaseContext(Context newBase) {\n    languagePreferences = new LanguagePreferences(newBase);\n    super.attachBaseContext(new ContextWrapper(newBase) {\n        @Override\n        public Context getApplicationContext() {\n            return this;\n        }\n\n        @Override\n        public Resources getResources() {\n            Configuration configuration = getBaseContext().getResources().getConfiguration();\n            configuration.setLocale(new Locale(languagePreferences.getLanguageCode()));\n            Context updatedContext = getBaseContext().createConfigurationContext(configuration);\n            return updatedContext.getResources();\n        }\n    });\n}\n',m="override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflateWithCrowdin(R.menu.activity_menu, menu, resources)\n    return true\n}",v="@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    ExtentionsKt.inflateWithCrowdin(getMenuInflater(), R.menu.your_menu, menu, getResources());\n    return true;\n}",f={},w="Setup",b={},y=[{value:"Context wrapping",id:"context-wrapping",level:3},{value:"Configuring Crowdin SDK",id:"configuring-crowdin-sdk",level:3},{value:"Change locale programmatically",id:"change-locale-programmatically",level:3},{value:"Config options",id:"config-options",level:3},{value:"Tips and tricks",id:"tips-and-tricks",level:3},{value:"Limitations",id:"limitations",level:3},{value:"See also",id:"see-also",level:3}];function C(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"setup",children:"Setup"})}),"\n",(0,r.jsx)(n.p,{children:"To configure Android SDK integration you need to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Upload your localization files to Crowdin. If you have existing translations, you can upload them as well. You can use one of the following options:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://crowdin.github.io/crowdin-cli/",children:"Crowdin CLI"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://store.crowdin.com/android-studio",children:"Android Studio Plugin"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/marketplace/actions/crowdin-action",children:"Crowdin GitHub Action"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://support.crowdin.com/uploading-files/",children:"and more"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Set up Distribution in Crowdin."}),"\n",(0,r.jsx)(n.li,{children:"Set up SDK and enable Over-The-Air Content Delivery feature in your project."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Distribution"})," is a CDN vault that mirrors the translated content of your project and is required for integration with Android app."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://support.crowdin.com/content-delivery/",children:"Creating a distribution in crowdin.com"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://support.crowdin.com/enterprise/content-delivery/",children:"Creating a distribution in Crowdin Enterprise"})}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["By default, the translation downloading happens ",(0,r.jsx)(n.strong,{children:"asynchronously"})," after launching the app. The downloaded translations will be used after the next launch of the app or Activity re-render. Otherwise, the ",(0,r.jsx)(n.a,{href:"/cache",children:"previously cached translations"})," will be used (or local translations if a cache does not exist)."]}),"\n",(0,r.jsx)(n.li,{children:"The CDN feature does not update the localization files. if you want to add new translations to the localization files you need to do it yourself."}),"\n",(0,r.jsxs)(n.li,{children:["Once SDK receives the translations, it's stored on the device as application files for further sessions to minimize requests the next time the app starts. Storage time can be configured using ",(0,r.jsx)(n.code,{children:"withUpdateInterval"})," option."]}),"\n",(0,r.jsx)(n.li,{children:"CDN caches all the translation in release for up to 1 hour and even when new translations are released in Crowdin, CDN may return it with a delay."}),"\n",(0,r.jsx)(n.li,{children:"To display a string, Crowdin will try to find it in the dynamic strings (from the CDN) and use the bundled version as a fallback. In other words, only the newly provided strings will be overridden and the bundled version will be used for the rest."}),"\n"]})}),"\n",(0,r.jsx)(n.p,{children:"To integrate the SDK with your application, follow the step-by-step instructions:"}),"\n",(0,r.jsx)(n.h3,{id:"context-wrapping",children:"Context wrapping"}),"\n",(0,r.jsxs)(n.p,{children:["Inject Crowdin translations by adding the ",(0,r.jsx)(n.em,{children:"override"})," method to the ",(0,r.jsx)(n.em,{children:"BaseActivity"})," class to inject Crowdin translations into the Context. If you have already migrated to ",(0,r.jsx)(n.a,{href:"https://developer.android.com/jetpack/androidx/releases/appcompat",children:"AppCompat"})," ",(0,r.jsx)(n.strong,{children:"1.2.0+"})," version, use this method:"]}),"\n","\n",(0,r.jsxs)(o.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(l.A,{language:"kotlin",children:d})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(l.A,{language:"java",children:c})})]}),"\n",(0,r.jsxs)(n.p,{children:["For AppCompat ",(0,r.jsx)(n.strong,{children:"1.1.0"})," and lower use this:"]}),"\n","\n",(0,r.jsxs)(o.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(l.A,{language:"kotlin",children:u})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(l.A,{language:"java",children:h})})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["If you don't have the ",(0,r.jsx)(n.em,{children:"BaseActivity"})," class, add the above code to all of your activities."]})}),"\n",(0,r.jsx)(n.h3,{id:"configuring-crowdin-sdk",children:"Configuring Crowdin SDK"}),"\n",(0,r.jsxs)(n.p,{children:["Enable ",(0,r.jsx)(n.em,{children:"Over-The-Air Content Delivery"})," in your project so that the application can pull translations from the CDN vault. Add the following code to the ",(0,r.jsx)(n.em,{children:"App"}),"/",(0,r.jsx)(n.em,{children:"Application"})," class:"]}),"\n","\n",(0,r.jsxs)(o.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(l.A,{language:"kotlin",children:p})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(l.A,{language:"java",children:g})})]}),"\n",(0,r.jsx)(n.h3,{id:"change-locale-programmatically",children:"Change locale programmatically"}),"\n",(0,r.jsxs)(n.p,{children:["Crowdin works with the current locale, if you want to change the locale programmatically use the ",(0,r.jsx)(n.em,{children:"language"})," plus ",(0,r.jsx)(n.em,{children:"country"})," format: ",(0,r.jsx)(n.code,{children:'Locale("en", "US")'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Example of language change in ",(0,r.jsx)(n.strong,{children:"App.kt/Application.java"}),":"]}),"\n","\n",(0,r.jsxs)(o.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(l.A,{language:"kotlin",children:x})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(l.A,{language:"java",children:j})})]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Make sure you've added this code to the ",(0,r.jsx)(n.strong,{children:"App.kt/Application.java"})," class."]})}),"\n",(0,r.jsx)(n.h3,{id:"config-options",children:"Config options"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Config option"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"withDistributionHash"})}),(0,r.jsx)(n.td,{children:"Distribution Hash"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'withDistributionHash("7a0c1...7uo3b")'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"withNetworkType"})}),(0,r.jsx)(n.td,{children:"Network type to be used for translations download"}),(0,r.jsxs)(n.td,{children:["Acceptable values are:",(0,r.jsx)("br",{}),"- ",(0,r.jsx)(n.code,{children:"NetworkType.ALL"})," (default)",(0,r.jsx)("br",{})," - ",(0,r.jsx)(n.code,{children:"NetworkType.CELLULAR"}),(0,r.jsx)("br",{}),"- ",(0,r.jsx)(n.code,{children:"NetworkType.WIFI"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"withUpdateInterval"})}),(0,r.jsxs)(n.td,{children:["Translations update interval in seconds. The minimum and the default value is 15 minutes. Visit the ",(0,r.jsx)(n.a,{href:"/cache",children:"Cache"})," page for more details"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"withUpdateInterval(900)"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"tips-and-tricks",children:"Tips and tricks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"1."})," To translate menu items you need to update your ",(0,r.jsx)(n.code,{children:"onCreateOptionsMenu"})," method:"]}),"\n","\n",(0,r.jsxs)(o.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(l.A,{language:"kotlin",children:m})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(l.A,{language:"java",children:v})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2."})," In case you have custom views that uses ",(0,r.jsx)(n.code,{children:"TypedArray"})," and ",(0,r.jsx)(n.code,{children:"stylable"})," attributes, you will need to use the following approach:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"val textId = typedArray.getResourceId(R.styleable.sample_item, 0)\n textView.setText(textId)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["instead of ",(0,r.jsx)(n.code,{children:"typedArray.getString(R.styleable.sample_item)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"3."})," Activity title defined via ",(0,r.jsx)(n.em,{children:"AndroidManifest"})," won't be translated:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<activity\n    android:name=".activities.SampleActivity"\n    android:label="@string/title"/>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can simply update your ",(0,r.jsx)(n.code,{children:"toolbar"})," inside of activity or fragment:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"toolbar.setTitle(R.string.title);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"4."})," In case your project already overrides ",(0,r.jsx)(n.code,{children:"attachBaseContext"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"super.attachBaseContext(Crowdin.wrapContext(SomeLib.wrap(newBase)));\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"5."})," You can register/unregister observer for data changes by adding this lines:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"override fun onCreate(savedInstanceState: Bundle?) {\n    Crowdin.registerDataLoadingObserver(this)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It has callback method ",(0,r.jsx)(n.code,{children:"onDataChanged()"})," that can be used to invalidate your UI (TextView/Menu etc.). It will use downloaded resources automatically."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"override fun onDataChanged() {\n    invalidateOptionsMenu()\n    Crowdin.updateMenuItemsText(R.menu.activity_main_drawer, navigationView.menu, resources)\n    toolbarMain.title = getString(R.string.category)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Otherwise, new resources are applied when the activity is restarted."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"6."})," In case you have a custom ",(0,r.jsx)(n.code,{children:"TextView"})," with string specified in xml, make sure you follow this naming convention ",(0,r.jsx)(n.code,{children:"PlaceholderTextView"})," otherwise SDK will skip this view during inflating process and it won't be translated."]}),"\n",(0,r.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Plurals are supported from Android SDK version 24."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TabItem"})," text added via xml won't be updated. There is workaround: you can store tabItem titles in your string-array and add tabs dynamically."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PreferenceScreen"})," defined via XML are not supported."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"advanced-features/real-time-preview",children:"Real-Time Preview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"advanced-features/screenshots",children:"Screenshots"})}),"\n"]})]})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(C,{...e})}):C(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var a=t(4164);const r={tabItem:"tabItem_Ymn6"};var i=t(4848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,o),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>y});var a=t(6540),r=t(4164),i=t(5627),o=t(6347),s=t(372),l=t(604),d=t(1861),c=t(8749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=h(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[d,u]=g({queryString:t,groupId:r}),[x,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),m=(()=>{const e=d??x;return p({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{m&&l(m)}),[m]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),j(e)}),[u,j,i]),tabValues:i}}var j=t(9136);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function f(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==a&&(d(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...i,className:(0,r.A)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=x(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",m.tabList),children:[(0,v.jsx)(f,{...n,...e}),(0,v.jsx)(w,{...n,...e})]})}function y(e){const n=(0,j.A)();return(0,v.jsx)(b,{...e,children:u(e.children)},String(n))}}}]);